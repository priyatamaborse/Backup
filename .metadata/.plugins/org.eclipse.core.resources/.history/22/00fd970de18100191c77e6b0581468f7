package assignment.junit.com.yash.training;

import static org.junit.Assert.assertEquals;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.runners.MockitoJUnitRunner;
import assignment.junit.com.yash.training.exception.DifferentCurrenciesException;
import assignment.junit.com.yash.training.model.Amount;
import assignment.junit.com.yash.training.model.Currency;
import assignment.junit.com.yash.training.model.Product;
import assignment.junit.com.yash.training.model.ProductType;

@RunWith(value = MockitoJUnitRunner.class)
public class ClientBOImplTest {

	private ClientBOImpl clientBoImpl = new ClientBOImpl();

	ProductImpl product, product1;

	private List<Product> emptyProductList, nonEmptyProductListWithDifferentCurrency, nonEmptyProductListWithSameCurrency;

	@Before
	public void setUp() {

		emptyProductList = new ArrayList<Product>();
		nonEmptyProductListWithDifferentCurrency = new ArrayList<Product>();
		nonEmptyProductListWithSameCurrency = new ArrayList<Product>();
		nonEmptyProductListWithDifferentCurrency
		.add(new ProductImpl(1, "HomeLoan", ProductType.LOAN,new AmountImpl(BigDecimal.ZERO, Currency.INDIAN_RUPEE)));
		nonEmptyProductListWithDifferentCurrency
		.add(new ProductImpl(2, "Loan", ProductType.LOAN, new AmountImpl(BigDecimal.ZERO, Currency.EURO)));
		nonEmptyProductListWithSameCurrency
		.add(new ProductImpl(1, "HomeLoan", ProductType.LOAN,new AmountImpl(BigDecimal.TEN, Currency.INDIAN_RUPEE)));
		nonEmptyProductListWithSameCurrency
		.add(new ProductImpl(2, "Loan", ProductType.LOAN, new AmountImpl(BigDecimal.ZERO, Currency.INDIAN_RUPEE)));
	}

	@Test
	public void shouldReturnAmountImplWithBigDecimalZeroAndCurrencyEuroWhenProductListIsEmpty() throws DifferentCurrenciesException {
		Amount actual = clientBoImpl.getClientProductsSum(emptyProductList);
		
		assertEquals(BigDecimal.ZERO, actual.getValue());
		assertEquals(Currency.EURO, actual.getCurrency());
	}

	@Test(expected = DifferentCurrenciesException.class)
	public void ShouldThrowDifferentCurrenciesExceptionIfCurrencyNotSameForAllProducts() throws DifferentCurrenciesException {
		clientBoImpl.getClientProductsSum(nonEmptyProductListWithDifferentCurrency);
	}

	@Test
	public void ShouldRuturnAmountImplimentationIfSameCurrenciesForAllProducts() throws DifferentCurrenciesException {
		Amount actual = clientBoImpl.getClientProductsSum(nonEmptyProductListWithSameCurrency);
		
		assertEquals(Currency.INDIAN_RUPEE, actual.getCurrency());
		assertEquals(BigDecimal.TEN, actual.getValue());
	}
}
